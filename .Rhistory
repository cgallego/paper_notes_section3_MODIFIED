lmProfile <- rfe(labeledX, y,
sizes = subsets,
metric = "ROC",
rfeControl = ctrl)
set.seed(1)
rfFuncs$summary <- twoClassSummary
RFEcontrol <- rfeControl(functions=rfFuncs,
method = "repeatedcv",
repeats = 2,
number = 5,
returnResamp="final",
verbose = FALSE)
trainctrl <- trainControl(classProbs= TRUE,
summaryFunction = twoClassSummary)
result <- rfe(labeledX, y,        # features # classification
sizes=subsets,
rfeControl=RFEcontrol,
metric = "ROC",
trControl = trainctrl)
result
# The lmProfile is a list of class "rfe" that contains an object fit that is the final linear model with the remaining terms. The model can be used to get predictions for future or test samples.
# The predictors function can be used to get a text string of variable names that were picked in the final model.
predictors(lmProfile)
lmProfile$fit
names(discrall_dict_allNMEs)
# add feature type name for statistics
allNMEs_dynamic$featureType <- "dynamic"
allNMEs_morphology$featureType <- "morphology"
allNMEs_texture$featureType <- "texture"
allNMEs_stage1$featureType <- "stage1"
discrall_dict_allNMEs$featureType <- "NetworkConnectivity"
# combine all
combX_allNME <- cbind(allNMEs_dynamic %>%
select(-X1),
allNMEs_morphology %>%
select(-X1),
allNMEs_texture %>%
select(-X1),
allNMEs_stage1 %>%
select(-X1),
discrall_dict_allNMEs %>%
select(-X1))
# The predictors are centered and scaled:
normalization <- preProcess(combX_allNME)
print(normalization)
normcombX_allNME <- predict(normalization, combX_allNME)
normcombX_allNME <- as.data.frame(normcombX_allNME)
y <- YnxG_allNME$classNME
cleaned_data <- na.omit(cbind.data.frame(normcombX_allNME,y))
# ommit the unknown class
labeledy <- cleaned_data %>%
filter(y != "U") %>%
select(y)
names(combX_allNME)
data.frame(featureName = names(allNMEs_dynamic))
data.frame(featureName = names(allNMEs_dynamic))
# combine all
combX_allNME <- cbind(allNMEs_dynamic %>%
select(-X1),
allNMEs_morphology %>%
select(-X1),
allNMEs_texture %>%
select(-X1),
allNMEs_stage1 %>%
select(-X1),
discrall_dict_allNMEs %>%
select(-X1))
allNMEs_dynamic <- allNMEs_dynamic %>%
select(-X1) %>%
mutate(featureType = "dynamic")
allNMEs_morphology <- allNMEs_morphology %>%
select(-X1) %>%
mutate(featureType = "morphology")
allNMEs_texture <- allNMEs_texture %>%
select(-X1) %>%
mutate(featureType = "texture")
allNMEs_stage1 <- allNMEs_stage1 %>%
select(-X1) %>%
mutate(featureType = "stage1")
discrall_dict_allNMEs <- discrall_dict_allNMEs %>%
select(-X1) %>%
mutate(featureType = "NetworkConnectivity")
allNMEs_dynamic$featureType
allNMEs_dynamic$featureType %>%
mutate(featName = names(allNMEs_dynamic))
allNMEs_dynamic %>%
select(-featureType) %>%
mutate(name = names(allNMEs_dynamic)) %>%
select(name)
allNMEs_dynamic %>%
select(-featureType) %>%
mutate(name = names(allNMEs_dynamic))
names(allNMEs_dynamic)
data.frame(Fname = names(allNMEs_dynamic, Ftype = "dyn")
)
data.frame(Fname = names(allNMEs_dynamic), Ftype = "dyn")
setwd("Z:/Cristina/Section3/paper_notes_section3_MODIFIED")
allNMEs_dynamic <- read_csv("datasets/dyn_roi_records_allNMEs_descStats.csv")
allNMEs_morphology <- read_csv("datasets/morpho_roi_records_allNMEs_descStats.csv")
allNMEs_texture <- read_csv("datasets/text_roi_records_allNMEs_descStats.csv")
allNMEs_stage1 <- read_csv("datasets/stage1_roi_records_allNMEs_descStats.csv")
discrall_dict_allNMEs =  read_csv("datasets/named_nxGnormfeatures_allNMEs_descStats.csv")
YnxG_allNME  =  read_csv('datasets/YnxG_allNME.csv')
allNMEs_dynamic <- allNMEs_dynamic %>%
select(-X1)
allNMEs_morphology <- allNMEs_morphology %>%
select(-X1)
allNMEs_texture <- allNMEs_texture %>%
select(-X1)
allNMEs_stage1 <- allNMEs_stage1 %>%
select(-X1)
discrall_dict_allNMEs <- discrall_dict_allNMEs %>%
select(-X1)
featDict <- rbind.data.frame(data.frame(Fname = names(allNMEs_dynamic), featureType = "dynamic"),
data.frame(Fname = names(allNMEs_morphology), featureType = "morphology"),
data.frame(Fname = names(allNMEs_texture), featureType = "texture"),
data.frame(Fname = names(allNMEs_stage1), featureType = "stage1"),
data.frame(Fname = names(discrall_dict_allNMEs), featureType = "NetworkConnectivity"))
featDict
combX_allNME <- cbind(allNMEs_dynamic, allNMEs_morphology, allNMEs_texture, allNMEs_stage1, discrall_dict_allNMEs)
names(combX_allNME)
# The predictors are centered and scaled:
normalization <- preProcess(combX_allNME)
print(normalization)
normcombX_allNME <- predict(normalization, combX_allNME)
normcombX_allNME <- as.data.frame(normcombX_allNME)
y <- YnxG_allNME$classNME
cleaned_data <- na.omit(cbind.data.frame(normcombX_allNME,y))
# ommit the unknown class
labeledy <- cleaned_data %>%
filter(y != "U") %>%
select(y)
labeledX <- cleaned_data %>%
filter(y != "U") %>%
select(-y, -featureType)
cleaned_data <- na.omit(cbind.data.frame(normcombX_allNME,y))
# ommit the unknown class
labeledy <- cleaned_data %>%
filter(y != "U") %>%
select(y)
labeledX <- cleaned_data %>%
filter(y != "U") %>%
select(-y)
y <- factor(labeledy$y)
print(summary(factor(featDict$featureType)))
cleaned_data <- na.omit(cbind.data.frame(normcombX_allNME,y))
# combine all
allNMEs_dynamic <- allNMEs_dynamic %>%
select(-X1)
setwd("Z:/Cristina/Section3/paper_notes_section3_MODIFIED")
allNMEs_dynamic <- read_csv("datasets/dyn_roi_records_allNMEs_descStats.csv")
allNMEs_morphology <- read_csv("datasets/morpho_roi_records_allNMEs_descStats.csv")
allNMEs_texture <- read_csv("datasets/text_roi_records_allNMEs_descStats.csv")
allNMEs_stage1 <- read_csv("datasets/stage1_roi_records_allNMEs_descStats.csv")
discrall_dict_allNMEs =  read_csv("datasets/named_nxGnormfeatures_allNMEs_descStats.csv")
YnxG_allNME  =  read_csv('datasets/YnxG_allNME.csv')
# combine all
allNMEs_dynamic <- allNMEs_dynamic %>%
select(-X1)
allNMEs_morphology <- allNMEs_morphology %>%
select(-X1)
allNMEs_texture <- allNMEs_texture %>%
select(-X1)
allNMEs_stage1 <- allNMEs_stage1 %>%
select(-X1)
discrall_dict_allNMEs <- discrall_dict_allNMEs %>%
select(-X1)
featDict <- rbind.data.frame(data.frame(Fname = names(allNMEs_dynamic), featureType = "dynamic"),
data.frame(Fname = names(allNMEs_morphology), featureType = "morphology"),
data.frame(Fname = names(allNMEs_texture), featureType = "texture"),
data.frame(Fname = names(allNMEs_stage1), featureType = "stage1"),
data.frame(Fname = names(discrall_dict_allNMEs), featureType = "NetworkConnectivity"))
print(summary(factor(featDict$featureType)))
# add featere type name for statistics
# combine all
combX_allNME <- cbind(allNMEs_dynamic, allNMEs_morphology, allNMEs_texture, allNMEs_stage1, discrall_dict_allNMEs)
# The predictors are centered and scaled:
normalization <- preProcess(combX_allNME)
print(normalization)
normcombX_allNME <- predict(normalization, combX_allNME)
normcombX_allNME <- as.data.frame(normcombX_allNME)
y <- YnxG_allNME$classNME
cleaned_data <- na.omit(cbind.data.frame(normcombX_allNME,y))
# ommit the unknown class
labeledy <- cleaned_data %>%
filter(y != "U") %>%
select(y)
labeledX <- cleaned_data %>%
filter(y != "U") %>%
select(-y)
y <- factor(labeledy$y)
print(summary(y))
View(allNMEs_stage1)
summary(allNMEs_stage1$V0)
summary(allNMEs_texture$texture_contrast_nondir_post1)
library(readr)
dyn_roi_records_allNMEs_descStats <- read_csv("datasets/dyn_roi_records_allNMEs_descStats.csv",
cols=cols(X1 = col_integer()))
View(dyn_roi_records_allNMEs_descStats)
library(readr)
dyn_roi_records_allNMEs_descStats <- read_csv("datasets/dyn_roi_records_allNMEs_descStats.csv",
col_names = TRUE, col_types = cols(X1 = col_integer()))
library(readr)
dyn_roi_records_allNMEs_descStats <- read_csv("datasets/dyn_roi_records_allNMEs_descStats.csv",
col_names = TRUE, col_types = cols())
View(allNMEs_dynamic)
View(allNMEs_dynamic)
View(dyn_roi_records_allNMEs_descStats)
allNMEs_morphology$circularity
as.numeric(allNMEs_morphology$circularity
)
as.numeric(allNMEs_morphology$min_F_r_i)
as.numeric(allNMEs_texture$texture_contrast_nondir_post1)
allNMEs_texture$texture_contrast_nondir_post1
allNMEs_morphology$circularity <- as.numeric(allNMEs_morphology$circularity)
allNMEs_morphology$min_F_r_i <- as.numeric(allNMEs_morphology$min_F_r_i)
allNMEs_texture$texture_contrast_nondir_post1 <- as.numeric(allNMEs_texture$texture_contrast_nondir_post1)
allNMEs_texture$texture_contrast_nondir_post2 <- as.numeric(allNMEs_texture$texture_contrast_nondir_post2)
allNMEs_texture$texture_correlation_nondir_post1 <- as.numeric(allNMEs_texture$texture_correlation_nondir_post1)
allNMEs_texture$texture_correlation_nondir_post3 <- as.numeric(allNMEs_texture$texture_correlation_nondir_post3)
allNMEs_texture$texture_correlation_nondir_post4 <- as.numeric(allNMEs_texture$texture_correlation_nondir_post4)
allNMEs_texture$texture_diffvariance_nondir_post1 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post1)
allNMEs_texture$texture_diffvariance_nondir_post2 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post2)
allNMEs_texture$texture_diffvariance_nondir_post3 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post3)
allNMEs_texture$texture_diffvariance_nondir_post4 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post4)
allNMEs_texture$texture_sumvariance_nondir_post1 <- as.numeric(allNMEs_texture$texture_sumvariance_nondir_post1)
allNMEs_texture$texture_sumvariance_nondir_post2 <- as.numeric(allNMEs_texture$texture_sumvariance_nondir_post2)
allNMEs_texture$texture_variance_nondir_post1 <- as.numeric(allNMEs_texture$texture_variance_nondir_post1)
allNMEs_texture$texture_variance_nondir_post2 <- as.numeric(allNMEs_texture$texture_variance_nondir_post2)
allNMEs_stage1$V10 <- as.numeric(allNMEs_stage1$V10)
allNMEs_stage1$V17 <- as.numeric(allNMEs_stage1$V17)
allNMEs_stage1$V19 <- as.numeric(allNMEs_stage1$V19)
allNMEs_stage1$V5 <- as.numeric(allNMEs_stage1$V5)
# combine all
allNMEs_dynamic <- allNMEs_dynamic %>%
select(-X1)
cleaned_data <- cbind.data.frame(normcombX_allNME,y)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(pROC)
library(readr)
library(plyr)
library(dplyr)
library(caret)
setwd("Z:/Cristina/Section3/paper_notes_section3_MODIFIED")
allNMEs_dynamic <- read_csv("datasets/dyn_roi_records_allNMEs_descStats.csv")
allNMEs_morphology <- read_csv("datasets/morpho_roi_records_allNMEs_descStats.csv")
allNMEs_texture <- read_csv("datasets/text_roi_records_allNMEs_descStats.csv")
allNMEs_stage1 <- read_csv("datasets/stage1_roi_records_allNMEs_descStats.csv")
discrall_dict_allNMEs =  read_csv("datasets/named_nxGnormfeatures_allNMEs_descStats.csv")
YnxG_allNME  =  read_csv('datasets/YnxG_allNME.csv')
allNMEs_morphology$circularity <- as.numeric(allNMEs_morphology$circularity)
allNMEs_morphology$min_F_r_i <- as.numeric(allNMEs_morphology$min_F_r_i)
allNMEs_texture$texture_contrast_nondir_post1 <- as.numeric(allNMEs_texture$texture_contrast_nondir_post1)
allNMEs_texture$texture_contrast_nondir_post2 <- as.numeric(allNMEs_texture$texture_contrast_nondir_post2)
allNMEs_texture$texture_correlation_nondir_post1 <- as.numeric(allNMEs_texture$texture_correlation_nondir_post1)
allNMEs_texture$texture_correlation_nondir_post3 <- as.numeric(allNMEs_texture$texture_correlation_nondir_post3)
allNMEs_texture$texture_correlation_nondir_post4 <- as.numeric(allNMEs_texture$texture_correlation_nondir_post4)
allNMEs_texture$texture_diffvariance_nondir_post1 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post1)
allNMEs_texture$texture_diffvariance_nondir_post2 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post2)
allNMEs_texture$texture_diffvariance_nondir_post3 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post3)
allNMEs_texture$texture_diffvariance_nondir_post4 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post4)
allNMEs_texture$texture_sumvariance_nondir_post1 <- as.numeric(allNMEs_texture$texture_sumvariance_nondir_post1)
allNMEs_texture$texture_sumvariance_nondir_post2 <- as.numeric(allNMEs_texture$texture_sumvariance_nondir_post2)
allNMEs_texture$texture_variance_nondir_post1 <- as.numeric(allNMEs_texture$texture_variance_nondir_post1)
allNMEs_texture$texture_variance_nondir_post2 <- as.numeric(allNMEs_texture$texture_variance_nondir_post2)
allNMEs_stage1$V10 <- as.numeric(allNMEs_stage1$V10)
allNMEs_stage1$V17 <- as.numeric(allNMEs_stage1$V17)
allNMEs_stage1$V19 <- as.numeric(allNMEs_stage1$V19)
allNMEs_stage1$V5 <- as.numeric(allNMEs_stage1$V5)
# combine all
allNMEs_dynamic <- allNMEs_dynamic %>%
select(-X1)
allNMEs_morphology <- allNMEs_morphology %>%
select(-X1)
allNMEs_texture <- allNMEs_texture %>%
select(-X1)
allNMEs_stage1 <- allNMEs_stage1 %>%
select(-X1)
discrall_dict_allNMEs <- discrall_dict_allNMEs %>%
select(-X1)
featDict <- rbind.data.frame(data.frame(Fname = names(allNMEs_dynamic), featureType = "dynamic"),
data.frame(Fname = names(allNMEs_morphology), featureType = "morphology"),
data.frame(Fname = names(allNMEs_texture), featureType = "texture"),
data.frame(Fname = names(allNMEs_stage1), featureType = "stage1"),
data.frame(Fname = names(discrall_dict_allNMEs), featureType = "NetworkConnectivity"))
print(summary(factor(featDict$featureType)))
# add featere type name for statistics
# combine all
combX_allNME <- cbind(allNMEs_dynamic, allNMEs_morphology, allNMEs_texture, allNMEs_stage1, discrall_dict_allNMEs)
# The predictors are centered and scaled:
normalization <- preProcess(combX_allNME)
print(normalization)
normcombX_allNME <- predict(normalization, combX_allNME)
normcombX_allNME <- as.data.frame(normcombX_allNME)
y <- YnxG_allNME$classNME
cleaned_data <- cbind.data.frame(normcombX_allNME,y)
print(summary(cleaned_data$y))
# ommit the unknown class
labeledy <- cleaned_data %>%
filter(y != "U") %>%
select(y)
labeledX <- cleaned_data %>%
filter(y != "U") %>%
select(-y)
y <- factor(labeledy$y)
subsets <- c(c(10, 25, 50, 75), (16:30)*5, c(200, 250, 300, 350, 400, 450, 500))
# There are also several plot methods to visualize the results. plot(lmProfile) produces the performance profile across different subset sizes, as shown in the figure below.
trellis.par.set(caretTheme())
plot(lmProfile, type = c("g", "o"))
predictors(rfeProfile)
predictors(lmProfile)
set.seed(1)
rfFuncs$summary <- twoClassSummary
RFEcontrol <- rfeControl(functions=rfFuncs,
method = "repeatedcv",
repeats = 2,
number = 5,
returnResamp="final",
verbose = FALSE)
trainctrl <- trainControl(classProbs= TRUE,
summaryFunction = twoClassSummary)
rfeProfile <- rfe(labeledX, y,        # features # classification
sizes=subsets,
rfeControl=RFEcontrol,
metric = "ROC",
trControl = trainctrl)
cleaned_data <- na.omit(cbind.data.frame(normcombX_allNME,y))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(pROC)
library(readr)
library(plyr)
library(dplyr)
library(caret)
setwd("Z:/Cristina/Section3/paper_notes_section3_MODIFIED")
allNMEs_dynamic <- read_csv("datasets/dyn_roi_records_allNMEs_descStats.csv")
allNMEs_morphology <- read_csv("datasets/morpho_roi_records_allNMEs_descStats.csv")
allNMEs_texture <- read_csv("datasets/text_roi_records_allNMEs_descStats.csv")
allNMEs_stage1 <- read_csv("datasets/stage1_roi_records_allNMEs_descStats.csv")
discrall_dict_allNMEs =  read_csv("datasets/named_nxGnormfeatures_allNMEs_descStats.csv")
YnxG_allNME  =  read_csv('datasets/YnxG_allNME.csv')
allNMEs_morphology$circularity <- as.numeric(allNMEs_morphology$circularity)
allNMEs_morphology$min_F_r_i <- as.numeric(allNMEs_morphology$min_F_r_i)
allNMEs_texture$texture_contrast_nondir_post1 <- as.numeric(allNMEs_texture$texture_contrast_nondir_post1)
allNMEs_texture$texture_contrast_nondir_post2 <- as.numeric(allNMEs_texture$texture_contrast_nondir_post2)
allNMEs_texture$texture_correlation_nondir_post1 <- as.numeric(allNMEs_texture$texture_correlation_nondir_post1)
allNMEs_texture$texture_correlation_nondir_post3 <- as.numeric(allNMEs_texture$texture_correlation_nondir_post3)
allNMEs_texture$texture_correlation_nondir_post4 <- as.numeric(allNMEs_texture$texture_correlation_nondir_post4)
allNMEs_texture$texture_diffvariance_nondir_post1 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post1)
allNMEs_texture$texture_diffvariance_nondir_post2 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post2)
allNMEs_texture$texture_diffvariance_nondir_post3 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post3)
allNMEs_texture$texture_diffvariance_nondir_post4 <- as.numeric(allNMEs_texture$texture_diffvariance_nondir_post4)
allNMEs_texture$texture_sumvariance_nondir_post1 <- as.numeric(allNMEs_texture$texture_sumvariance_nondir_post1)
allNMEs_texture$texture_sumvariance_nondir_post2 <- as.numeric(allNMEs_texture$texture_sumvariance_nondir_post2)
allNMEs_texture$texture_variance_nondir_post1 <- as.numeric(allNMEs_texture$texture_variance_nondir_post1)
allNMEs_texture$texture_variance_nondir_post2 <- as.numeric(allNMEs_texture$texture_variance_nondir_post2)
allNMEs_stage1$V10 <- as.numeric(allNMEs_stage1$V10)
allNMEs_stage1$V17 <- as.numeric(allNMEs_stage1$V17)
allNMEs_stage1$V19 <- as.numeric(allNMEs_stage1$V19)
allNMEs_stage1$V5 <- as.numeric(allNMEs_stage1$V5)
# combine all
allNMEs_dynamic <- allNMEs_dynamic %>%
select(-X1)
allNMEs_morphology <- allNMEs_morphology %>%
select(-X1)
allNMEs_texture <- allNMEs_texture %>%
select(-X1)
allNMEs_stage1 <- allNMEs_stage1 %>%
select(-X1)
discrall_dict_allNMEs <- discrall_dict_allNMEs %>%
select(-X1)
featDict <- rbind.data.frame(data.frame(Fname = names(allNMEs_dynamic), featureType = "dynamic"),
data.frame(Fname = names(allNMEs_morphology), featureType = "morphology"),
data.frame(Fname = names(allNMEs_texture), featureType = "texture"),
data.frame(Fname = names(allNMEs_stage1), featureType = "stage1"),
data.frame(Fname = names(discrall_dict_allNMEs), featureType = "NetworkConnectivity"))
print(summary(factor(featDict$featureType)))
# add featere type name for statistics
# combine all
combX_allNME <- cbind(allNMEs_dynamic, allNMEs_morphology, allNMEs_texture, allNMEs_stage1, discrall_dict_allNMEs)
# The predictors are centered and scaled:
normalization <- preProcess(combX_allNME)
print(normalization)
normcombX_allNME <- predict(normalization, combX_allNME)
normcombX_allNME <- as.data.frame(normcombX_allNME)
y <- YnxG_allNME$classNME
print(summary(y))
print(summary(factor(y)))
cleaned_data <- na.omit(cbind.data.frame(normcombX_allNME,y))
# ommit the unknown class
labeledy <- cleaned_data %>%
filter(y != "U") %>%
select(y)
labeledX <- cleaned_data %>%
filter(y != "U") %>%
select(-y)
y <- factor(labeledy$y)
subsets <- c(c(10, 25, 50, 75), (16:30)*5, c(200, 250, 300, 350, 400, 450, 500))
set.seed(1)
rfFuncs$summary <- twoClassSummary
RFEcontrol <- rfeControl(functions=rfFuncs,
method = "repeatedcv",
repeats = 2,
number = 5,
returnResamp="final",
verbose = FALSE)
trainctrl <- trainControl(classProbs= TRUE,
summaryFunction = twoClassSummary)
rfeProfile <- rfe(labeledX, y,        # features # classification
sizes=subsets,
rfeControl=RFEcontrol,
metric = "ROC",
trControl = trainctrl)
rfeProfile
# The lmProfile is a list of class "rfe" that contains an object fit that is the final linear model with the remaining terms. The model can be used to get predictions for future or test samples.
# The predictors function can be used to get a text string of variable names that were picked in the final model.
predictors(rfeProfile)
rfeProfile$fit
# There are also several plot methods to visualize the results. plot(lmProfile) produces the performance profile across different subset sizes, as shown in the figure below.
trellis.par.set(caretTheme())
plot(rfeProfile, type = c("g", "o"))
optimalset <- predictors(rfeProfile)
optimalset
feat = optimalset[1]
featDict
featDict %>%
filter(Fname == feat) %>%
select(featureType)
ftypes <- c()
ftypes <- c(ftypes,
featDict %>%
filter(Fname == feat) %>%
select(featureType))
ftypes <- c(ftypes,
featDict %>%
filter(Fname == feat) %>%
select(featureType))
ftypes
featDict %>%
filter(Fname == feat)$featureType)
featDict %>%
filter(Fname == feat)$featureType
featDict %>%
filter(Fname == feat)
featDict %>%
filter(Fname == feat)[,2]
typefeatrue <- featDict %>%
filter(Fname == feat)
ftypes <- c()
for(feat in optimalset){
typefeatrue <- featDict %>%
filter(Fname == feat)
ftypes <- c(ftypes, typefeatrue$featureType
}
ftypes <- c()
for(feat in optimalset){
typefeatrue <- featDict %>%
filter(Fname == feat)
ftypes <- c(ftypes, typefeatrue$featureType)
}
featDict %>%
filter(Fname == feat)ftypes
ftypes
ftypes <- c()
for(feat in optimalset){
typefeatrue <- featDict %>%
filter(Fname == feat)
ftypes <- c(ftypes, as.character(typefeatrue$featureType))
}
ftypes
optimalFeatureSet <- data.frame(fnames=optimalset, ftypes=ftypes)
optimalFeatureSet
optimalFeatureSet %>%
group_by(ftypes) %>%
tally()
optimalFeatureSet %>%
group_by(ftypes)
optimalFeatureSet %>%
arrange(ftypes)
subsets <- c(c(10, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75), (16:30)*5, c(200, 250, 300, 350, 400, 450, 500))
subsets
# There are also several plot methods to visualize the results. plot(lmProfile) produces the performance profile across different subset sizes, as shown in the figure below.
trellis.par.set(caretTheme())
plot(rfeProfile, type = c("g", "o"))
optimalset <- predictors(rfeProfile)
ftypes <- c()
for(feat in optimalset){
typefeatrue <- featDict %>%
filter(Fname == feat)
ftypes <- c(ftypes, as.character(typefeatrue$featureType))
}
optimalFeatureSet <- data.frame(fnames=optimalset, ftypes=ftypes)
optimalFeatureSet %>%
group_by(ftypes) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n))
optimalset <- predictors(rfeProfile)
ftypes <- c()
for(feat in optimalset){
typefeatrue <- featDict %>%
filter(Fname == feat)
ftypes <- c(ftypes, as.character(typefeatrue$featureType))
}
optimalFeatureSet <- data.frame(fnames=optimalset, ftypes=ftypes)
optimalFeatureSet %>%
group_by(ftypes) %>%
tally() %>%
mutate(freq = n / sum(n))
print(optimalFeatureSet %>%
arrange(ftypes))
optimalFeatureSet
optimalset
write.csv(optimalset, "datasets/optimalset.csv")
